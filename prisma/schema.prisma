generator client {
    provider   = "prisma-client-js"
    engineType = "library"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum CategoryType {
    PRIMARY
    SECONDARY
    TERTIARY
    QUATERNARY
}

enum Role {
    ADMIN
    USER
    GUEST
}

enum Status {
    DRAFT
    ACTIVE
    ARCHIVED
}

enum PaymentStatus {
    PENDING
    REFUND
    PAID
    UNPAID
    CANCELLED
}

enum ShippingStatus {
    NOT_SHIPPED
    SHIPPED
    DELIVERED
    RETURNED
    CANCELLED
}

enum RefundStatus {
    NOT_REFUND
    PENDING
    APPROVED
    REJECTED
    CANCELLED
}

enum FulFillmentType {
    FOR_DELIVERY
    FOR_COLLECTION
}

enum OrderTimelineEventType {
    ORDER_PLACED
    PAYMENT_RECEIVED
    ORDER_PROCESSING
    ORDER_SHIPPED
    ORDER_DELIVERED
    ORDER_CANCELLED
    REFUND_INITIATED
    REFUND_COMPLETED
    NOTE_ADDED // For general notes/comments
    STATUS_CHANGED // For any status changes
}

// Add the OrderTimeline model
model OrderTimeline {
    id        String                 @id @default(cuid())
    orderId   String
    order     Order                  @relation(fields: [orderId], references: [id], onDelete: Cascade)
    eventType OrderTimelineEventType
    message   String // Human readable description of what happened
    metadata  Json? // Additional data like old/new status, tracking numbers, etc
    createdAt DateTime               @default(now())

    @@index([orderId])
}

model Category {
    id                        String       @id @default(cuid())
    name                      String
    type                      CategoryType
    parentPrimaryCategory     Category?    @relation("PrimaryChildCategories", fields: [parentPrimaryCategoryId], references: [id])
    parentPrimaryCategoryId   String?
    primaryChildCategories    Category[]   @relation("PrimaryChildCategories")
    parentSecondaryCategory   Category?    @relation("SecondaryChildCategories", fields: [parentSecondaryCategoryId], references: [id])
    parentSecondaryCategoryId String?
    secondaryChildCategories  Category[]   @relation("SecondaryChildCategories")
    parentTertiaryCategory    Category?    @relation("TertiaryChildCategories", fields: [parentTertiaryCategoryId], references: [id])
    parentTertiaryCategoryId  String?
    tertiaryChildCategories   Category[]   @relation("TertiaryChildCategories")
    primaryProducts           Product[]    @relation("PrimaryProductCategory")
    secondaryProducts         Product[]    @relation("SecondaryProductCategory")
    tertiaryProducts          Product[]    @relation("TertiaryProductCategory")
    quaternaryProducts        Product[]    @relation("QuaternaryProductCategory")
    image                     String?
    createdAt                 DateTime     @default(now())
    updatedAt                 DateTime     @updatedAt
}

model Product {
    id                   String           @id @default(cuid())
    name                 String           @unique
    description          String?
    sku                  String?          @unique
    model                String?
    productCode          String?
    type                 String?
    warranty             String?
    guarantee            String?
    tradePrice           Float?           @default(0)
    contractPrice        Float?           @default(0)
    promotionalPrice     Float?           @default(0)
    retailPrice          Float?           @default(0)
    unit                 String?
    weight               Float?
    color                String?
    length               Float?
    width                Float?
    height               Float?
    material             String?
    volume               String?
    shape                String?
    productTemplate      ProductTemplate? @relation(fields: [productTemplateId], references: [id], onDelete: SetNull)
    productTemplateId    String?
    features             String[]
    primaryCategory      Category?        @relation("PrimaryProductCategory", fields: [primaryCategoryId], references: [id])
    primaryCategoryId    String?
    secondaryCategory    Category?        @relation("SecondaryProductCategory", fields: [secondaryCategoryId], references: [id])
    secondaryCategoryId  String?
    tertiaryCategory     Category?        @relation("TertiaryProductCategory", fields: [tertiaryCategoryId], references: [id])
    tertiaryCategoryId   String?
    quaternaryCategory   Category?        @relation("QuaternaryProductCategory", fields: [quaternaryCategoryId], references: [id])
    quaternaryCategoryId String?
    brand                Brand?           @relation(fields: [brandId], references: [id])
    brandId              String?
    manufacturerLink     String?
    status               Status?          @default(DRAFT)
    manuals              String[]
    images               String[]
    inventory            Inventory?
    orderItems           OrderItem[]
    wishlistedBy         User[]           @relation("UserWishlist")
    createdAt            DateTime         @default(now())
    updatedAt            DateTime         @updatedAt
}

model Brand {
    id              String    @id @default(cuid())
    name            String    @unique
    products        Product[]
    description     String?
    status          Status?   @default(DRAFT)
    website         String?
    countryOfOrigin String?
    image           String?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
}

model Template {
    id               String            @id @default(cuid())
    name             String            @unique
    description      String?
    fields           TemplateField[]
    status           Status?
    productTemplates ProductTemplate[]
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
}

model TemplateField {
    id                    String                 @id @default(cuid())
    fieldName             String
    fieldType             FieldType
    fieldOptions          String?
    templateId            String
    orderIndex            Int?
    productTemplateFields ProductTemplateField[]
    template              Template               @relation(fields: [templateId], references: [id], onDelete: Cascade)
    createdAt             DateTime               @default(now())
    updatedAt             DateTime               @updatedAt
}

model ProductTemplate {
    id         String                 @id @default(cuid())
    fields     ProductTemplateField[]
    template   Template               @relation(fields: [templateId], references: [id])
    templateId String
    products   Product[]
    createdAt  DateTime               @default(now())
    updatedAt  DateTime               @updatedAt
}

model ProductTemplateField {
    id                String          @id @default(cuid())
    productTemplateId String
    productTemplate   ProductTemplate @relation(fields: [productTemplateId], references: [id], onDelete: Cascade)
    templateFieldId   String
    templateField     TemplateField   @relation(fields: [templateFieldId], references: [id], onDelete: Cascade)
    fieldValue        String?
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt
}

enum FieldType {
    TEXT
    SELECT
}

model Inventory {
    id                              String     @id @default(cuid())
    deliveryEligibility             Boolean    @default(true)
    maxDeliveryTime                 String?
    maxDeliveryTimeExceedingStock   String?
    deliveryAreas                   String[]
    minDeliveryCount                Int?       @default(0)
    maxDeliveryCount                Int?
    collectionEligibility           Boolean    @default(true)
    collectionAvailabilityTime      String?
    maxCollectionTimeExceedingStock String?
    collectionPoints                String[]
    minCollectionCount              Int?       @default(0)
    maxCollectionCount              Int?
    stockCount                      Int        @default(0)
    soldCount                       Int        @default(0)
    heldCount                       Int        @default(0)
    product                         Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId                       String     @unique
    cartItems                       CartItem[]
    createdAt                       DateTime   @default(now())
    updatedAt                       DateTime   @updatedAt
}

model User {
    id                  String               @id @default(cuid())
    firstName           String?
    lastName            String?
    avatar              String?
    email               String               @unique
    contactEmail        String?
    phone               String?
    password            String?
    role                Role                 @default(USER)
    carts               Cart[]
    orders              Order[]
    addresses           Address[]
    wishlist            Product[]            @relation("UserWishlist")
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    passwordResetTokens PasswordResetToken[]
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// New model for password reset tokens
model PasswordResetToken {
    id        String   @id @default(cuid())
    token     String   @unique
    expires   DateTime
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())
}

model PromoCode {
    id            String            @id @default(cuid())
    code          String            @unique
    description   String?
    discountType  PromoDiscountType // PERCENTAGE or FIXED
    discountValue Float
    minOrderValue Float?
    maxDiscount   Float?
    startDate     DateTime
    endDate       DateTime
    usageLimit    Int? // Total number of times this code can be used
    usageCount    Int               @default(0)
    status        Status            @default(DRAFT) // Using existing Status enum
    carts         Cart[] // Relation to carts using this code
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt
}

enum PromoDiscountType {
    PERCENTAGE
    FIXED
}

enum CartStatus {
    ACTIVE
    ORDERED
    ABANDONED
    EXPIRED
}

model Cart {
    id                        String     @id @default(cuid())
    userId                    String?
    sessionId                 String?
    user                      User?      @relation(fields: [userId], references: [id])
    cartItems                 CartItem[]
    status                    CartStatus @default(ACTIVE)
    deliveryTotalWithVat      Float      @default(0)
    deliveryTotalWithoutVat   Float      @default(0)
    collectionTotalWithVat    Float      @default(0)
    collectionTotalWithoutVat Float      @default(0)
    subTotalWithVat           Float      @default(0)
    subTotalWithoutVat        Float      @default(0)
    deliveryCharge            Float      @default(0)
    vat                       Float      @default(0)
    promoCode                 PromoCode? @relation(fields: [promoCodeId], references: [id])
    promoCodeId               String?
    promoDiscount             Float?     @default(0)
    totalPriceWithoutVat      Float      @default(0)
    totalPriceWithVat         Float      @default(0)
    order                     Order?
    createdAt                 DateTime   @default(now())
    updatedAt                 DateTime   @updatedAt

    @@unique([userId, sessionId])
}

enum OrderStatus {
    DRAFT
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    COMPLETED
    CANCELLED
    RETURNED
    RETURNED_REFUND
    AWAITING_PAYMENT // New status
}

model Order {
    id              String          @id @default(cuid())
    userId          String
    cartId          String          @unique
    cart            Cart            @relation(fields: [cartId], references: [id])
    user            User            @relation(fields: [userId], references: [id])
    orderItems      OrderItem[]
    totalPrice      Float           @default(0)
    status          Status          @default(DRAFT)
    orderStatus     OrderStatus     @default(PENDING)
    orderNumber     String          @unique
    paymentMethod   String?
    paymentStatus   PaymentStatus   @default(UNPAID)
    trackingNumber  String?
    trackingUrl     String?
    shippingAddress String?
    shippingMethod  String?
    shippingStatus  ShippingStatus  @default(NOT_SHIPPED)
    shippingPrice   Float?
    shippingDate    DateTime?
    deliveryDate    DateTime?
    invoice         String?
    invoiceUrl      String?
    paymentDate     DateTime?
    refundDate      DateTime?
    refundStatus    RefundStatus    @default(NOT_REFUND)
    refundAmount    Float?
    refundReason    String?
    refundNote      String?
    timeline        OrderTimeline[]
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
}

model CartItem {
    id          String          @id @default(cuid())
    cartId      String
    cart        Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
    type        FulFillmentType //delivery or collection
    inventory   Inventory       @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
    inventoryId String
    price       Float           @default(0)
    totalPrice  Float           @default(0)
    quantity    Int             @default(0)
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
}

model OrderItem {
    id         String          @id @default(cuid())
    orderId    String
    order      Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
    productId  String
    type       FulFillmentType
    product    Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
    quantity   Int             @default(0)
    price      Float           @default(0)
    totalPrice Float           @default(0)
    createdAt  DateTime        @default(now())
    updatedAt  DateTime        @updatedAt
}

model Address {
    id                String   @id @default(cuid())
    userId            String
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    addressLine1      String
    addressLine2      String?
    city              String // Often referred to as 'town' in the UK
    county            String? // Optional in the UK
    postcode          String // UK equivalent of 'postal code'
    country           String   @default("United Kingdom")
    isBilling         Boolean  @default(false)
    isShipping        Boolean  @default(false)
    isDefaultBilling  Boolean? @default(false)
    isDefaultShipping Boolean? @default(false)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
}

model Settings {
    id                            String      @id @default(cuid())
    // Store Settings
    storeName                     String      @default("City Spark")
    storeEmail                    String?
    storePhone                    String?
    storeLogo                     String?
    currency                      String      @default("GBP")
    timezone                      String      @default("Europe/London")
    // Tax Settings
    percentVat                    Float       @default(20.0) // UK standard VAT rate
    enableVat                     Boolean     @default(true)
    displayPricesInclusiveVat     Boolean     @default(true)
    // Delivery Settings
    defaultDeliveryCharge         Float       @default(0)
    freeDeliveryThreshold         Float? // Free delivery above this amount
    minimumOrderValue             Float       @default(0)
    maximumOrderValue             Float?
    defaultDeliveryTimeInDays     Int         @default(3)
    // Collection Settings
    enableCollectionOption        Boolean     @default(true)
    collectionPreparationTime     Int         @default(24) // In hours
    // Inventory Settings
    lowStockThreshold             Int         @default(5)
    enableStockManagement         Boolean     @default(true)
    allowBackorders               Boolean     @default(false)
    // Order Settings
    autoConfirmOrders             Boolean     @default(false)
    orderNumberPrefix             String      @default("ORD")
    defaultOrderStatus            OrderStatus @default(PENDING)
    // Contact Information
    businessAddress               String?
    businessPhone                 String?
    supportEmail                  String?
    // Social Media
    facebookUrl                   String?
    twitterUrl                    String?
    instagramUrl                  String?
    linkedinUrl                   String?
    // SEO Settings
    metaTitle                     String?
    metaDescription               String?
    // Email Settings
    enableOrderConfirmationEmails Boolean     @default(true)
    enableLowStockAlerts          Boolean     @default(true)
    enableMarketingEmails         Boolean     @default(true)
    // Analytics
    googleAnalyticsId             String?
    enableAnalytics               Boolean     @default(false)
    // System Settings
    maintenanceMode               Boolean     @default(false)
    allowGuestCheckout            Boolean     @default(true)
    createdAt                     DateTime    @default(now())
    updatedAt                     DateTime    @updatedAt
}
